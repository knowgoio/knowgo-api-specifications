---
openapi: 3.0.0
info:
  title: KnowGo Vehicle Simulator API
  description: |
    This is a simple API for interacting with the KnowGo Vehicle Simulator. It
    provides mechanisms for starting/stopping the simulated vehicle, sending
    notifications to the vehicle, registering webhooks, and for obtaining
    detailed information and generated telemetry from the vehicle.

    It further offers the ability to submit external events in order to allow
    the vehicle simulation state to be synchronized with external vehicle data,
    allowing the simulated vehicle to act as a digital twin upon which
    additional applications and services can be modelled.

    Fine-grained access to vehicle data is provided through ISO 20078
    Extended Vehicle (ExVe)-compatible API endpoints.
  contact:
    email: labs@adaptant.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.1.0
servers:
- url: http://localhost:8086
  description: Local Simulation Environment
- url: https://virtserver.swaggerhub.com/Adaptant/knowgo-vehicle-simulator-api/1.1.0
  description: SwaggerHub API Auto Mocking
tags:
- name: simulator
  description: Vehicle Simulator APIs
- name: exve
  description: ISO 20078 Extended Vehicle (ExVe) APIs
paths:
  /simulator/start:
    post:
      tags:
      - simulator
      summary: start the simulated vehicle
      description: Starts the running of the vehicle within the simulator
      operationId: vehicleStart
      responses:
        "200":
          description: OK
  /simulator/stop:
    post:
      tags:
      - simulator
      summary: stop the simulated vehicle
      description: Stops the running of the vehicle within the simulator
      operationId: vehicleStop
      responses:
        "200":
          description: OK
  /simulator/notification:
    post:
      tags:
      - simulator
      summary: send a notification to the simulated vehicle
      description: Sends a notification to the simulated vehicle
      operationId: vehicleNotify
      requestBody:
        description: Notification text to display
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleNotification'
        required: true
      responses:
        "200":
          description: OK
  /simulator/info:
    get:
      tags:
      - simulator
      summary: information about the simulated vehicle
      description: Obtain detailed information about the simulated vehicle.
      operationId: getVehicleInfo
      responses:
        "200":
          description: vehicle details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDetail'
  /simulator/events:
    get:
      tags:
      - simulator
      summary: get simulated vehicle events
      description: |
        Obtain detailed events from the simulated vehicle in its running state.
      operationId: getVehicleEvents
      responses:
        "200":
          description: vehicle events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleEvent'
    post:
      tags:
      - simulator
      summary: apply events to the simulated vehicle
      description: |
        Submit a list of vehicle events to apply to the simulated vehicle. This
        can be used for digital twinning, where the simulation model state can
        be synchronized with external data sources.
      operationId: addVehicleEvents
      requestBody:
        description: Vehicle events to apply to the simulated vehicle
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/VehicleEvent'
      responses:
        "201":
          description: Events successfully added
  /simulator/webhooks:
    get:
      tags:
      - simulator
      summary: get a list of available event triggers
      operationId: getAvailableEventTriggers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks'
    post:
      tags:
      - simulator
      summary: register a new event-triggered webhook
      operationId: registerWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        "201":
          description: Webhook registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscription'
      callbacks:
        journey_begin:
          '{$request.body#/notificationUrl}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      required:
                      - journey_begin
                      type: object
                      properties:
                        journey_begin:
                          $ref: '#/components/schemas/JourneyChange'
                required: true
              responses:
                "200":
                  description: Notification accepted
        journey_end:
          '{$request.body#/notificationUrl}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      required:
                      - journey_end
                      type: object
                      properties:
                        journey_end:
                          $ref: '#/components/schemas/JourneyChange'
                required: true
              responses:
                "200":
                  description: Notification accepted
        location_changed:
          '{$request.body#/notificationUrl}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      required:
                      - location_changed
                      type: object
                      properties:
                        location_changed:
                          $ref: '#/components/schemas/LocationChange'
                required: true
              responses:
                "200":
                  description: Notification accepted
        ignition_changed:
          '{$request.body#/notificationUrl}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      required:
                      - ignition_changed
                      type: object
                      properties:
                        ignition_changed:
                          $ref: '#/components/schemas/IgnitionChange'
                required: true
              responses:
                "200":
                  description: Notification accepted
        harsh_acceleration:
          '{$request.body#/notificationUrl}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      required:
                      - harsh_acceleration
                      type: object
                      properties:
                        harsh_acceleration:
                          $ref: '#/components/schemas/HarshPedalEvent'
                required: true
              responses:
                "200":
                  description: Notification accepted
        harsh_braking:
          '{$request.body#/notificationUrl}':
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      required:
                      - harsh_braking
                      type: object
                      properties:
                        harsh_braking:
                          $ref: '#/components/schemas/HarshPedalEvent'
                required: true
              responses:
                "200":
                  description: Notification accepted
  /simulator/webhooks/{subscriptionId}:
    get:
      tags:
      - simulator
      summary: get information about a registered webhook
      operationId: getWebhookById
      parameters:
      - name: subscriptionId
        in: path
        description: Subscription ID of the webhook to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhooks'
    put:
      tags:
      - simulator
      summary: update a registered webhook
      operationId: updateWebhookById
      parameters:
      - name: subscriptionId
        in: path
        description: Subscription ID of the webhook to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_1'
        required: true
      responses:
        "200":
          description: Webhook updated
        "404":
          description: Webhook subscription not found
    delete:
      tags:
      - simulator
      summary: unregister a webhook
      operationId: unregisterWebhook
      parameters:
      - name: subscriptionId
        in: path
        description: Subscription ID of the webhook to unregister
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Webhook unregistered
  /exve/vehicles:
    get:
      tags:
      - exve
      summary: get list of vehicles available
      description: Obtain a list of vehicles available to the accessing party
      operationId: getVehicles
      responses:
        "200":
          description: list of available vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleID'
  /exve/vehicles/{vehicleId}:
    get:
      tags:
      - exve
      summary: get information about a specific vehicle
      description: Obtain detailed information about a specific vehicle
      operationId: getVehicleInfoById
      parameters:
      - name: vehicleId
        in: path
        description: Numeric ID of the vehicle to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: vehicle details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDetail'
  /exve/vehicles/{vehicleId}/capabilities:
    get:
      tags:
      - exve
      summary: get the capabilities of a specific vehicle
      description: |
        Obtain a list of capabilities of a specific vehicle
      operationId: getVehicleCapabilitiesById
      parameters:
      - name: vehicleId
        in: path
        description: Numeric ID of the vehicle to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: vehicle capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleExVeResources'
  /exve/vehicles/{vehicleId}/resources:
    get:
      tags:
      - exve
      summary: get the available resources a specific vehicle
      description: |
        Obtain a list of available resources for a specific vehicle
      operationId: getVehicleResourcesById
      parameters:
      - name: vehicleId
        in: path
        description: Numeric ID of the vehicle to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: available resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleExVeResources'
  /exve/vehicles/{vehicleId}/notification:
    post:
      tags:
      - exve
      summary: send a notification to a specific vehicle
      description: Sends a notification to a specific vehicle
      operationId: vehicleNotifyById
      parameters:
      - name: vehicleId
        in: path
        description: Numeric ID of the vehicle
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Notification text to display
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleNotification'
        required: true
      responses:
        "200":
          description: OK
  /exve/vehicles/{vehicleId}/acceleratorPedalPositions:
    get:
      tags:
      - exve
      summary: get the accelerator pedal positions for a specific vehicle
      description: |
        Obtain a list of changes in accelerator pedal positions for a specific
        vehicle.
      operationId: getAcceleratorPedalPositionsById
      parameters:
      - name: vehicleId
        in: path
        description: Numeric ID of the vehicle to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: accelerator pedal positions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceleratorPedalPositions'
  /exve/vehicles/{vehicleId}/odometers:
    get:
      tags:
      - exve
      summary: get the odometer values for a specific vehicle
      description: |
        Obtain a list of changes in odometer readings for a specific vehicle.
      operationId: getOdometersById
      parameters:
      - name: vehicleId
        in: path
        description: Numeric ID of the vehicle to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: odometer readings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Odometers'
  /exve/vehicles/{vehicleId}/locations:
    get:
      tags:
      - exve
      summary: get the locations for a specific vehicle
      description: |
        Obtain a list of changes in geolocation for a specific vehicle.
      operationId: getLocationsById
      parameters:
      - name: vehicleId
        in: path
        description: Numeric ID of the vehicle to get
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: vehicle locations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Locations'
components:
  schemas:
    VehicleDetail:
      required:
      - AutoID
      type: object
      properties:
        AutoID:
          type: integer
          format: int64
        DriverID:
          type: integer
          format: int64
        FleetID:
          type: integer
          format: int64
        OwnerID:
          type: integer
          format: int64
        Name:
          type: string
          example: My Car
        Make:
          type: string
          example: Opel
        Model:
          type: string
          example: Astra
        Year:
          type: integer
        VIN:
          maxLength: 17
          minLength: 0
          type: string
          description: Vehicle identification number in accordance with ISO 3779:2009
          example: WP0ZZZ99ZTS392124
        LicensePlate:
          type: string
        RegistrationExpiry:
          type: string
          format: date
        FuelCapacity:
          type: string
        Odometer:
          maximum: 16777214
          minimum: 0
          type: number
          format: double
        PolicyID:
          type: string
        Notes:
          type: string
          description: Optional field to enter owner notes about the vehicle
          example: My work car
        PhotoUrls:
          type: array
          items:
            type: string
            example: http://www.example.com/images/mycar.png
        DriveTrain:
          maxLength: 10
          minLength: 3
          type: string
        EngineType:
          maxLength: 30
          minLength: 3
          type: string
        ExteriorColor:
          maxLength: 30
          minLength: 3
          type: string
        InteriorColor:
          maxLength: 30
          minLength: 3
          type: string
        Transmission:
          maxLength: 30
          minLength: 3
          type: string
    VehicleEvent:
      required:
      - EventID
      type: object
      properties:
        EventID:
          type: integer
          format: int64
        JourneyID:
          type: string
        AutoID:
          type: integer
          format: int64
        EventCategoryID:
          type: integer
          format: int32
        steering_wheel_angle:
          maximum: 600
          minimum: -600
          type: number
          format: float
        torque_at_transmission:
          maximum: 1500
          minimum: -500
          type: number
          format: float
        engine_speed:
          maximum: 16382
          minimum: 0
          type: number
          format: float
        vehicle_speed:
          maximum: 655
          minimum: 0
          type: number
          format: float
        accelerator_pedal_position:
          maximum: 100
          minimum: 0
          type: number
          format: float
        parking_brake_status:
          type: string
          enum:
          - "true"
          - "false"
        brake_pedal_status:
          type: string
          enum:
          - "true"
          - "false"
        transmission_gear_position:
          type: string
          enum:
          - first
          - second
          - third
          - fourth
          - fifth
          - sixth
          - seventh
          - eighth
          - ninth
          - tenth
          - reverse
          - neutral
        gear_lever_position:
          type: string
          enum:
          - drive
          - sport
          - low
          - first
          - second
          - third
          - fourth
          - fifth
          - sixth
          - seventh
          - eighth
          - ninth
          - tenth
          - reverse
          - neutral
        odometer:
          maximum: 16777214
          minimum: 0
          type: number
          format: double
        ignition_status:
          $ref: '#/components/schemas/IgnitionStatus'
        fuel_level:
          maximum: 150
          minimum: 0
          type: number
          description: percentage fuel remaining level
          format: float
        fuel_consumed_since_restart:
          maximum: 4294967295
          minimum: 0
          type: number
          description: fuel consumed in litres (this goes to 0 every time the vehicle restarts, like a trip meter)
          format: double
        door_status:
          type: string
          enum:
          - driver
          - passenger
          - rear_left
          - rear_right
        headlamp_status:
          type: string
          enum:
          - "true"
          - "false"
        high_beam_status:
          type: string
          enum:
          - "true"
          - "false"
        windshield_wiper_status:
          type: string
          enum:
          - "true"
          - "false"
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        bearing:
          type: number
          format: float
        accuracy:
          type: number
          format: float
        timestamp:
          type: string
          format: date-time
        accel_x:
          type: number
          format: float
        accel_y:
          type: number
          format: float
        accel_z:
          type: number
          format: float
        gyro_x:
          type: number
          format: float
        gyro_y:
          type: number
          format: float
        gyro_z:
          type: number
          format: float
    VehicleNotification:
      required:
      - text
      type: object
      properties:
        text:
          type: string
          example: Harsh braking detected
    VehicleID:
      required:
      - vehicleId
      type: object
      properties:
        vehicleId:
          type: integer
          format: int64
          example: 1
    VehicleExVeResources:
      required:
      - resources
      type: object
      properties:
        resources:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/VehicleExVeResources_resources'
    AcceleratorPedalPositions:
      required:
      - acceleratorPedalPositions
      type: object
      properties:
        acceleratorPedalPositions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AcceleratorPedalPositions_acceleratorPedalPositions'
    Odometers:
      required:
      - odometers
      type: object
      properties:
        odometers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Odometers_odometers'
    LocationChange:
      required:
      - latitude
      - longitude
      - timestamp
      - vehicleId
      type: object
      properties:
        vehicleId:
          type: integer
          example: 123
        latitude:
          type: number
          example: 48.0202599980004
        longitude:
          type: number
          example: 11.58485
        timestamp:
          type: string
          format: date-time
    Locations:
      required:
      - locations
      type: object
      properties:
        locations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Locations_locations'
    Webhooks:
      uniqueItems: true
      type: array
      example:
      - journey_begin
      - journey_end
      - location_changed
      - ignition_changed
      - harsh_acceleration
      - harsh_braking
      items:
        type: string
        enum:
        - journey_begin
        - journey_end
        - location_changed
        - ignition_changed
        - harsh_acceleration
        - harsh_braking
    WebhookSubscription:
      required:
      - subscriptionId
      type: object
      properties:
        subscriptionId:
          type: string
          format: uuid
          example: 3701fac0-391b-4ad7-8392-8cba1ae5feca
    JourneyChange:
      type: object
      properties:
        vehicleId:
          type: integer
          example: 123
        driverId:
          type: integer
          example: 22
        latitude:
          type: number
          example: 48.0202599980004
        longitude:
          type: number
          example: 11.58485
        timestamp:
          type: string
          format: date-time
    IgnitionStatus:
      type: string
      enum:
      - "false"
      - accessory
      - run
      - start
    IgnitionChange:
      type: object
      properties:
        vehicleId:
          type: integer
          example: 123
        ignition_start_state:
          $ref: '#/components/schemas/IgnitionStatus'
        ignition_end_state:
          $ref: '#/components/schemas/IgnitionStatus'
        timestamp:
          type: string
          format: date-time
    HarshPedalEvent:
      type: object
      properties:
        vehicleId:
          type: integer
          example: 123
        pedal_start_position:
          type: integer
          description: Pedal position as a percentage
          example: 25
        pedal_end_position:
          type: integer
          description: Pedal position as a percentage
          example: 95
        timestamp:
          type: string
          format: date-time
    body:
      required:
      - notificationUrl
      - webhooks
      type: object
      properties:
        webhooks:
          $ref: '#/components/schemas/Webhooks'
        notificationUrl:
          type: string
          format: uri
          example: https://myserver/endpoint
    body_1:
      required:
      - notificationUrl
      - webhooks
      type: object
      properties:
        webhooks:
          $ref: '#/components/schemas/Webhooks'
        notificationUrl:
          type: string
          format: uri
          example: https://myserver/endpoint
    VehicleExVeResources_resources:
      type: object
      properties:
        name:
          type: string
          example: odometers
        version:
          type: string
          example: "1.0"
        href:
          type: string
          example: /exve/{vehicleId}/odometers
    AcceleratorPedalPositions_acceleratorPedalPositions:
      type: object
      properties:
        value:
          type: integer
          example: 40
        units:
          type: string
          example: percent
        timestamp:
          type: string
          format: date-time
    Odometers_odometers:
      type: object
      properties:
        value:
          type: number
          example: 1000.25
        units:
          type: string
          example: km
        timestamp:
          type: string
          format: date-time
    Locations_locations:
      required:
      - latitude
      - longitude
      - timestamp
      type: object
      properties:
        latitude:
          type: number
          example: 48.0202599980004
        longitude:
          type: number
          example: 11.58485
        timestamp:
          type: string
          format: date-time
